#!/usr/bin/env python3
"""
Script de deploy autom√°tico para BOH! Dialogue System
"""
import subprocess
import sys
import os
from pathlib import Path


def run_command(command, description):
    """Executa um comando e mostra o resultado"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(
            command, shell=True, check=True, capture_output=True, text=True
        )
        print(f"‚úÖ {description} - OK")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erro:")
        print(f"   {e.stderr}")
        return False


def check_git_status():
    """Verifica o status do git"""
    print("üîç Verificando status do Git...")
    try:
        result = subprocess.run(
            ["git", "status", "--porcelain"], capture_output=True, text=True
        )
        if result.stdout.strip():
            print("‚ö†Ô∏è  H√° arquivos modificados n√£o commitados:")
            print(result.stdout)
            return False
        else:
            print("‚úÖ Git status limpo")
            return True
    except Exception as e:
        print(f"‚ùå Erro ao verificar git: {e}")
        return False


def get_current_branch():
    """Obt√©m a branch atual"""
    try:
        result = subprocess.run(
            ["git", "branch", "--show-current"], capture_output=True, text=True
        )
        return result.stdout.strip()
    except:
        return "unknown"


def main():
    """Executa o processo de deploy"""
    print("üöÄ BOH! Dialogue System - Deploy Script")
    print("=" * 50)

    # Verificar se estamos no diret√≥rio correto
    if not Path("manage.py").exists():
        print("‚ùå Execute este script no diret√≥rio raiz do projeto")
        sys.exit(1)

    # Verificar configura√ß√£o
    print("1Ô∏è‚É£ Verificando configura√ß√£o...")
    if not run_command("python check_config.py", "Verifica√ß√£o da configura√ß√£o"):
        sys.exit(1)

    # Gerar site est√°tico
    print("\n2Ô∏è‚É£ Gerando site est√°tico...")
    if not run_command("python build_github_pages.py", "Build do GitHub Pages"):
        sys.exit(1)

    # Verificar Git
    print("\n3Ô∏è‚É£ Verificando Git...")
    current_branch = get_current_branch()
    print(f"   Branch atual: {current_branch}")

    if current_branch != "ghpage":
        print("‚ö†Ô∏è  Voc√™ n√£o est√° na branch 'ghpage'")
        response = input("   Deseja trocar para ghpage? (y/N): ")
        if response.lower() == "y":
            if not run_command("git checkout ghpage", "Mudan√ßa para branch ghpage"):
                sys.exit(1)
        else:
            print("   Continuando na branch atual...")

    # Verificar arquivos n√£o commitados
    if not check_git_status():
        response = input("   Deseja commitar as mudan√ßas? (y/N): ")
        if response.lower() == "y":
            commit_msg = (
                input("   Mensagem do commit: ") or "Deploy configuration update"
            )
            if run_command("git add .", "Adicionando arquivos"):
                run_command(f'git commit -m "{commit_msg}"', "Commitando mudan√ßas")

    # Instru√ß√µes finais
    print("\n" + "=" * 50)
    print("üéâ Prepara√ß√£o para deploy conclu√≠da!")
    print("\nüìã Pr√≥ximos passos manuais:")
    print("1. Configure os secrets no GitHub:")
    print("   - VERCEL_TOKEN")
    print("   - VERCEL_ORG_ID")
    print("   - VERCEL_PROJECT_ID")
    print("\n2. Configure GitHub Pages:")
    print("   - Settings ‚Üí Pages ‚Üí GitHub Actions")
    print("\n3. Fa√ßa push para deploy:")
    print("   git push origin ghpage")
    print("\n4. Monitore os deploys:")
    print("   - GitHub Actions: https://github.com/suzuma/Boh/actions")
    print("   - Vercel: https://vercel.com/dashboard")
    print("\nüåê URLs finais:")
    print("   - Frontend: https://suzuma.github.io/Boh")
    print("   - API: https://boh-dialogue-api.vercel.app/api/dialogue/")


if __name__ == "__main__":
    main()
